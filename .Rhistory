# viz total churn by paying months
ggplot(churn_tenure, aes(Tenure, churn_rate)) +
geom_point() +
geom_smooth() +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(title = "Churn Rate
By Months Retained",
subtitle = "Percentage of customers that churned per
number of paying months with the company ",
x = "Paid Months", y = "Percent Churned")
# gender format
churn_frequencies <- telco %>%
group_by(Gender) %>%
mutate(sample = n()) %>%
filter(Churn_numeric == 1) %>%
group_by(Gender) %>%
summarise(churned = sum(Churn_numeric),
sample = first(sample),
churned = round(churned/sample,3),
retained = round(1 - churned,3)) %>%
group_by(Gender)
# gender
ggRententionByGender <- telco %>%
ggplot(aes(x = reorder(Gender, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Gender",
x = "Gender", y = "Percent Churned")
ggRententionByGender
# senior citizens
ggRententionBySeniors <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "SeniorCitizen", "0" = "Not Senior Citizen")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Senior Citizen",
x = "Senior Citizen", y = "Percent Retained")
ggRententionBySeniors
# senior citizens
ggRententionBySeniors <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "SeniorCitizen", "0" = "Not Senior Citizen")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Senior Citizen",
x = "Senior Citizen", y = "Percent Churned")
ggRententionBySeniors
# payment method
ggRententionByPayment <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "Churned", "0" = "Retained")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
#facet_grid(~ PaymentMethod) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Payment Method",
x = "Payment", y = "Percent Retained")
ggRententionByPayment
# payment method
ggRententionByPayment <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "Churned", "0" = "Retained")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
#facet_grid(~ PaymentMethod) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Payment Method",
x = "Payment", y = "Percent Churned")
ggRententionByPayment
# payment method
ggRententionByPayment <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "Churned", "0" = "Retained")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_grid(~ PaymentMethod) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Payment Method",
x = "Payment", y = "Percent Churned")
ggRententionByPayment
# payment method
ggRententionByPayment <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "Churned", "0" = "Retained")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_grid(~ PaymentMethod) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Payment Method",
x = "Senior Citizen", y = "Percent Churned")
ggRententionByPayment
# payment method
ggRententionByPayment <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "Senior Citizen", "0" = "Non-Senior Citizen")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_grid(~ PaymentMethod) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Payment Method",
x = "Senior Citizen", y = "Percent Churned")
ggRententionByPayment
# payment method
ggRententionByPayment <- telco %>%
ggplot(aes(x = reorder(SeniorCitizen, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_x_discrete(labels=c("1" = "Senior", "0" = "Non-Senior")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_grid(~ PaymentMethod) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Payment Method",
x = "Senior Citizen", y = "Percent Churned")
ggRententionByPayment
# round monthly payment to whole dollars
telco$MonthlyCharges_round <- round(telco$MonthlyCharges,0)
# find quantiles
quantile(telco$MonthlyCharges_round)
# create quantiles
telco$MonthlyCharges_quantiles <- ifelse(telco$MonthlyCharges_round <= 36, "25 Percentile",
ifelse(telco$MonthlyCharges_round > 36 & telco$MonthlyCharges_round <= 70, "50 Percentile",
ifelse(telco$MonthlyCharges_round > 70 & telco$MonthlyCharges_round <= 90, "75 Percentile",
ifelse(telco$MonthlyCharges_round > 90, "100 Percentile", "other"))))
# churn rate format per monthly charges
churn_monthlypay <- telco %>%
group_by(MonthlyCharges_round) %>%
mutate(sample = n()) %>%
filter(Churn_numeric == 1) %>%
group_by(MonthlyCharges_round, MonthlyCharges_quantiles ) %>%
summarize(churned = sum(Churn_numeric),
sample = first(sample),
churn_rate = round(churned/sample,4)) %>%
group_by(MonthlyCharges_round, MonthlyCharges_quantiles)
# viz total churn by monthly payments
ggplot(churn_monthlypay, aes(MonthlyCharges_round, churn_rate)) +
geom_point() +
geom_smooth(method = "lm") +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_grid(~ MonthlyCharges_quantiles, scales = "free") +
labs(title = "Churn Rate
By Monthy Payment",
subtitle = "Percentage of customers that churned by
the customer's monthly payment",
x = "Monthly Payment", y = "Percent Churned")
# round total charges
telco$TotalCharges_round <- round(telco$TotalCharges,0)
# churn rate format per total charges
churn_totalpay <- telco %>%
group_by(TotalCharges_round) %>%
mutate(sample = n()) %>%
filter(Churn_numeric == 1) %>%
group_by(TotalCharges_round , PaymentMethod) %>%
summarize(churned = sum(Churn_numeric),
sample = first(sample),
churn_rate = round(churned/sample,4)) %>%
group_by(TotalCharges_round, PaymentMethod)
# viz total churn by total charges
ggplot(churn_totalpay, aes(TotalCharges_round, churn_rate)) +
geom_point() +
geom_smooth(method = "lm") +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_grid(~ PaymentMethod) +
labs(title = "Churn Rate
By Total Charges",
subtitle = "Percentage of customers that churned by
the customer's total charges",
x = "Total Charges", y = "Percent Churned")
labels <- c(Yes = "With Paperless Billing", No = "Without Paperless Billing")
ggRententionByInternet <- telco %>%
ggplot(aes(x = reorder(InternetService, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~ PaperlessBilling, labeller=labeller(PaperlessBilling = labels)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Internet Service
and Paperless Billing",
x = "Service Type", y = "Percent Retained")
ggRententionByInternet
ggRententionByInternet <- telco %>%
ggplot(aes(x = reorder(InternetService, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~ PaperlessBilling, labeller=labeller(PaperlessBilling = labels)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Internet Service
and Paperless Billing",
x = "Phone Service Type", y = "Percent Retained")
ggRententionByInternet
ggRententionByInternet <- telco %>%
ggplot(aes(x = reorder(InternetService, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~ PaperlessBilling, labeller=labeller(PaperlessBilling = labels)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Internet Service
and Paperless Billing",
x = "Phone Service Type", y = "Percent Churned")
ggRententionByInternet
ggRententionByInternet <- telco %>%
ggplot(aes(x = reorder(InternetService, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
#facet_wrap(~ PaperlessBilling, labeller=labeller(PaperlessBilling = labels)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Internet Service
and Paperless Billing",
x = "Phone Service Type", y = "Percent Churned")
ggRententionByInternet
ggRententionByInternet <- telco %>%
ggplot(aes(x = reorder(PaperlessBilling, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
#facet_wrap(~ PaperlessBilling, labeller=labeller(PaperlessBilling = labels)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Internet Service
and Paperless Billing",
x = "Phone Service Type", y = "Percent Churned")
ggRententionByInternet
ggRententionByInternet <- telco %>%
ggplot(aes(x = reorder(InternetService, + Churn_numeric), y = Churn_numeric)) +
stat_summary(fun.y=mean, geom="bar", fill = "#0072B2") +
stat_summary(fun.data=mean_cl_boot, geom="errorbar", width=0.3) +
theme_fivethirtyeight() +
theme(axis.title = element_text()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~ PaperlessBilling, labeller=labeller(PaperlessBilling = labels)) +
theme(legend.position = 'none') +
labs(title = "Churn Rate By Internet Service
and Paperless Billing",
x = "Phone Service Type", y = "Percent Churned")
ggRententionByInternet
?crosstable
?crosstable()
library(gmodels)
CrossTable(telco$PaperlessBilling, telco$Churn_numeric, format = "SPSS", fisher = TRUE)
source('~/Documents/churn_model_casestudy/eda_telco.R', echo=TRUE)
CrossTable(telco$PaperlessBilling, telco$Churn_numeric, format = "SPSS", fisher = TRUE)
CrossTable(telco$PaperlessBilling, telco$Churn_numeric, format = "SPSS", fisher = TRUE)
ggRententionByInternet
utils::download.file(url = "http://bit.ly/goodenuff-R", destfile = "goodenuffR-template.Rmd")
library(knitr)
library(rmdformats)
require(tidyverse)
library(plotly)
require(janitor)
require(skimr)
library(mosaic)
library(inspectdf)
library(visdat)
library(DT)
# base options ----
base::options(
tibble.print_max = 25,
tibble.width = 78,
scipen = 100000000,
max.print = 999999
)
# knitr chunk options ----
knitr::opts_chunk$set(
echo = TRUE, # show/hide all code
# results = "hide", # hide results
tidy = FALSE, # cleaner code printing
comment = "#> ", # better console printing
eval = TRUE, # turn this to FALSE stop code chunks from running
message = TRUE, # show messages
fig.width = 7, # figure width
fig.height = 5, # figure height
warning = FALSE, # show warnings
size = "small", # size of the text
fig.path = "figs/"
) # location of files
# knitr knit settings ----
knitr::opts_knit$set(
width = 78
)
# CITATION ------------------------------------------------------
if (!file.exists("CITATION")) {
file.create("CITATION")
}
# LICENSE ------------------------------------------------------
if (!file.exists("LICENSE")) {
file.create("LICENSE")
}
# requirements.txt ------------------------------------------------------
if (!file.exists("requirements.txt")) {
file.create("requirements.txt")
}
# CHANGELOG.md ------------------------------------------------------
if (!file.exists("CHANGELOG.md")) {
file.create("CHANGELOG.md")
}
c("## 2016-04-08\n\n * Switched to cubic interpolation as default.\n* Moved question about family's TB history to end of questionnaire.\n \n## 2016-04-06\n* Added option for cubic interpolation.\n
* Removed question about staph exposure (can be inferred from blood test results).") %>% readr::write_lines( "CHANGELOG.md")
# data ------------------------------------------------------------------
if (!file.exists("data/")) {
dir.create("data/")
}
# data README ----
if (!file.exists("data/README.md")) {
file.create("data/README.md")
}
data_info <- "\n\n\n# For guidance please see:\n\n# Sharing data\nhttp://bit.ly/data-4-sharing\n\n\n# Data in spreadsheets\nhttp://bit.ly/data-in-sheets\n"
# append to README.md
if (file.exists("data/README.md")) {
data_info %>% readr::write_lines("data/README.md",
append = TRUE)
}
# code ------------------------------------------------------------------
if (!file.exists("code/")) {
dir.create("code/")
}
# tidyverse scripts ----
if (!file.exists(c("./code/01-import.R", "./code/02-tidy.R",
"./code/03-wrangle.R", "./code/04-visualize.R",
"./code/05-model.R", "./code/06-communicate.R",
"./code/runall.R"))) {
file.create(c("./code/01-import.R", "./code/02-tidy.R",
"./code/03-wrangle.R", "./code/04-visualize.R",
"./code/05-model.R", "./code/06-communicate.R",
"./code/runall.R"))
}
script_headers <- c("#=====================================================================#\n# This is code to create:\n# Authored by and feedback to:\n# MIT License\n# Version:\n#=====================================================================#\n")
# add to 01-import.R
script_headers %>% readr::write_lines("./code/01-import.R")
# add to 02-tidy.R
script_headers %>% readr::write_lines("./code/02-tidy.R")
# add to 03-wrangle.R
script_headers %>% readr::write_lines( "./code/03-wrangle.R")
# add to 04-visualize.R
script_headers %>% readr::write_lines( "./code/04-visualize.R")
# add to 05-model.R
script_headers %>% readr::write_lines( "./code/05-model.R")
# add to 06-communicate.R
script_headers %>% readr::write_lines( "./code/06-communicate.R")
if (!file.exists("./code/runall.R")) {
file.create("./code/runall.R")
}
c("#=====================================================================#\n\n# The controller script: A controller script for a simple project, for example,\n# may read a raw data table, import and apply several cleanup and analysis\n# functions from the other files in this directory, and create and save a\n# numeric result.\n\n# TEMP_DIR = ./temp_zip_files/\n\n# echo 'Packaging zip files required by analysis tool...'\n# mkdir $(TEMP_DIR)\n# ./src/make-zip-files.py $(TEMP_DIR) *.dat\n\n# echo 'Analyzing...'\n# ./bin/sqr_mean_analyze -i $(TEMP_DIR) -b 'temp'\n\n# echo 'Cleaning up...'\n# rm -rf $(TEMP_DIR)\n\n#=====================================================================#") %>%
readr::write_lines("./code/runall.R")
# results ------------------------------------------------------------------
if (!file.exists("results/")) {
dir.create("results/")
}
# results README
if (!file.exists("results/README.md")) {
file.create("results/README.md")
}
results_info <- c("Results notes:\n===================\n\n> Put raw data and metadata in a `data` directory, and files generated during\n> cleanup and analysis in a `results` directory.")
if (file.exists("results/README.md")) {
results_info %>% readr::write_lines("results/README.md",
append = TRUE)
}
# docs ------------------------------------------------------------------
if (!file.exists("doc/")) {
dir.create("doc/")
}
# doc files -------
if (!file.exists(c("./doc/lab-notes.md", "./doc/project-manuscript.md"))) {
file.create(c("./doc/lab-notes.md", "./doc/project-manuscript.md"))
}
fs::dir_tree(".")
fs::dir_ls("data")
fs::dir_ls("data/raw")
fs::dir_ls("data/raw")
TelcoDataRaw <- readr::read_csv("data/raw/WA_Fn-UseC_-Telco-Customer-Churn.csv")
TelcoDataRaw %>% skimr::skim_to_wide()
TelcoDataRaw %>% skimr::skim()
TelcoDataRaw %>%
skimr::skim()
fs::dir_tree("data/raw", regex = "dict")
TelcoDataRaw
TelcoDataRaw %>% dplyr::distinct(customerID)
identical(x = TelcoDataRaw %>% dplyr::distinct(customerID),
y = TelcoDataRaw %>% nrow())
identical(x = TelcoDataRaw %>% dplyr::distinct(customerID) %>% nrow(),
y = TelcoDataRaw %>% nrow())
TelcoDataRaw %>% count(InternetService)
TelcoDataRaw %>% head()
TelcoDataRaw %>%
dplyr::filter(customerID == "7795-CFOCW")
TelcoCaseStudy <- TelcoDataRaw %>%
dplyr::filter(customerID == "7795-CFOCW")
TelcoCaseStudy
fs::dir_tree("data/raw", regex = "dict")
# fs::dir_ls("data/raw")
TelcoDataRaw <- readr::read_csv("data/raw/WA_Fn-UseC_-Telco-Customer-Churn.csv")
inspectdf::inspect_cat(df1 = TelcoDataRaw)
inspectdf::inspect_cat(df1 = TelcoDataRaw) %>%
inspectdf::show_plot(text_labels = TRUE)
inspectdf::inspect_num(df1 = TelcoDataRaw) %>%
inspectdf::show_plot(text_labels = TRUE)
TelcoDataRaw %>% dplyr::mutate(customerID = factor(customerID),
senior_citizen = case_when(
SeniorCitizen == 1 ~ "yes",
SeniorCitizen == 0 ~ "no",
TRUE ~ NA_character_)) %>%
count(senior_citizen, SeniorCitizen)
TelcoData <- TelcoDataRaw %>%
dplyr::mutate(customerID = factor(customerID),
SeniorCitizen = case_when(
SeniorCitizen == 1 ~ "yes",
SeniorCitizen == 0 ~ "no",
TRUE ~ NA_character_))
# re-graph
inspectdf::inspect_cat(df1 = TelcoData) %>%
inspectdf::show_plot(text_labels = TRUE)
TelcoData <- TelcoDataRaw %>%
dplyr::mutate(customerID = factor(customerID),
SeniorCitizen = case_when(
SeniorCitizen == 1 ~ "Yes",
SeniorCitizen == 0 ~ "No",
TRUE ~ NA_character_))
# re-graph
inspectdf::inspect_cat(df1 = TelcoData) %>%
inspectdf::show_plot(text_labels = TRUE)
TelcoData <- TelcoDataRaw %>%
dplyr::mutate(customerID = as.factor(customerID),
SeniorCitizen = case_when(
SeniorCitizen == 1 ~ "Yes",
SeniorCitizen == 0 ~ "No",
TRUE ~ NA_character_))
# re-graph
inspectdf::inspect_cat(df1 = TelcoData) %>%
inspectdf::show_plot(text_labels = TRUE)
inspectdf::inspect_num(df1 = TelcoData) %>%
inspectdf::show_plot(text_labels = TRUE)
inspectdf::inspect_num(df1 = TelcoData) %>%
inspectdf::show_plot(text_labels = TRUE)
base::identical(x = TelcoDataRaw %>% dplyr::distinct(customerID) %>% nrow(),
y = TelcoDataRaw %>% nrow())
base::identical(x = TelcoData %>% dplyr::distinct(customerID) %>% nrow(),
y = TelcoData %>% nrow())
TelcoCaseStudy %>% glimpse()
TelcoCaseStudy %>%
tidyr::gather(key = "service",
value = "purchased",
PhoneService:StreamingMovies)
TelcoCaseStudy %>%
tidyr::gather(key = "service",
value = "purchase_status",
PhoneService:StreamingMovies)
TelcoCaseStudy %>%
tidyr::gather(key = "service",
value = "purchase_status",
PhoneService:StreamingMovies) %>%
count(purchase_status)
TelcoCaseStudy
TelcoCaseStudy %>% count(MultipleLines)
TelcoData %>% count(MultipleLines)
TelcoData %>% glimpse()
TelcoData %>% count(MultipleLines)
TelcoData %>% count(InternetService)
TelcoData %>% count(MultipleLines)
TelcoData %>% count(InternetService)
TelcoCaseStudy %>%
tidyr::gather(key = "service",
value = "purchase_status",
PhoneService:StreamingMovies) %>%
count(purchase_status)
TelcoCaseStudy <- TelcoDataRaw %>%
dplyr::filter(customerID == "7795-CFOCW")
TelcoCaseStudy
